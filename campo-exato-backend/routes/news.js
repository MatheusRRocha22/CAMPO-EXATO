import express from "express";
import fetch from "node-fetch";

const router = express.Router();

const CACHE_TIME = 30 * 60 * 1000;
const cache = {};

function normalize(text = "") {
  return String(text)
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/\s+/g, " ")
    .trim();
}

function escapeRegex(str = "") {
  return String(str).replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}

const BASE_QUERY =
  "agropecu√°ria OR agricultura OR pecu√°ria OR gado leiteiro OR soja OR milho OR caf√©";

const VALID_TERMS = [
  // üå± Setores principais
  "agropecu√°ria",
  "agricultura",
  "pecu√°ria",
  "gado",
  "gado leiteiro",
  "leite",
  "gado de corte",
  "frango",
  "su√≠nos",
  "avicultura",
  "hortifr√∫ti",
  "floricultura",
  "silvicultura",
  "piscicultura",
  "apicultura",
  "ovinos",
  "caprinos",
  "camar√£o",
  "carne bovina",
  "carne su√≠na",
  "carne de frango",
  "latic√≠nios",

  // üåæ Produtos agr√≠colas
  "soja",
  "milho",
  "caf√©",
  "arroz",
  "feij√£o",
  "trigo",
  "algod√£o",
  "cana-de-a√ß√∫car",
  "frutas",
  "vegetais",
  "citrus",
  "laranja",
  "lim√£o",
  "banana",
  "manga",
  "uva",
  "abacaxi",
  "tomate",
  "batata",
  "cenoura",
  "mandioca",
  "milho verde",
  "milho safrinha",
  "amendoim",
  "caju",
  "goiaba",
  "ab√≥bora",
  "pepino",
  "ervilha",

  // üåæ Insumos e t√©cnicas
  "fertilizante",
  "adubo",
  "defensivo",
  "agrot√≥xico",
  "sementes",
  "irriga√ß√£o",
  "poda",
  "colheita",
  "plantio",
  "rota√ß√£o de culturas",
  "biotecnologia",
  "maquin√°rio agr√≠cola",
  "tratores",
  "colheitadeiras",
  "implementos agr√≠colas",
  "drones agr√≠colas",
  "sensoriamento remoto",
  "controle biol√≥gico",
  "agricultura de precis√£o",
  "plantio direto",
  "aduba√ß√£o",
  "compostagem",

  // üí∞ Economia e mercado
  "pre√ßo da soja",
  "pre√ßo do milho",
  "exporta√ß√£o agr√≠cola",
  "importa√ß√£o agr√≠cola",
  "commodity",
  "agroneg√≥cio",
  "produ√ß√£o agr√≠cola",
  "custo de produ√ß√£o",
  "bolsa de valores agr√≠cola",
  "previs√£o de safra",
  "demanda agr√≠cola",
  "safra",
  "estoque agr√≠cola",
  "neg√≥cios rurais",
  "mercado agr√≠cola",
  "cota√ß√£o agr√≠cola",

  // üèõÔ∏è Pol√≠ticas e legisla√ß√£o
  "pol√≠tica agr√≠cola",
  "subs√≠dios agr√≠colas",
  "incentivo rural",
  "cr√©dito rural",
  "empr√©stimo rural",
  "agroind√∫stria",
  "sustentabilidade agr√≠cola",
  "certifica√ß√£o org√¢nica",
  "legisla√ß√£o agr√≠cola",
  "regulamenta√ß√£o agr√≠cola",
  "reforma agr√°ria",
  "seguro rural",
  "zoneamento agr√≠cola",
  "programas do governo rural",

  // üíª Tecnologia e inova√ß√£o
  "agrotecnologia",
  "precision farming",
  "agricultura digital",
  "smart farming",
  "internet das coisas agr√≠cola",
  "IoT agr√≠cola",
  "gest√£o agr√≠cola",
  "software agr√≠cola",
  "sensor agr√≠cola",
  "monitoramento remoto",
  "big data agr√≠cola",
  "intelig√™ncia artificial agr√≠cola",
  "robotiza√ß√£o agr√≠cola",

  // üåç Sustentabilidade e meio ambiente
  "agroecologia",
  "org√¢nico",
  "produ√ß√£o sustent√°vel",
  "conserva√ß√£o do solo",
  "recupera√ß√£o de pastagem",
  "manejo florestal",
  "agrofloresta",
  "prote√ß√£o ambiental",
  "redu√ß√£o de emiss√µes",
  "carbono neutro agr√≠cola",
  "biomassa",
  "energia renov√°vel rural",

  // üî¨ Pesquisa e desenvolvimento
  "engenharia agr√≠cola",
  "gen√©tica vegetal",
  "melhoramento gen√©tico",
  "pesquisa agr√≠cola",
  "extens√£o rural",
  "ensaios de campo",
  "laborat√≥rio agr√≠cola",
];

const NORMALIZED_VALID_TERMS = VALID_TERMS.map((t) => normalize(t));

router.get("/", async (req, res) => {
  try {
    const SERPAPI_KEY = process.env.SERPAPI_KEY;
    if (!SERPAPI_KEY) {
      return res.status(500).json({ error: "SERPAPI_KEY n√£o definida!" });
    }

    const debug = req.query.debug === "1";

    const rawQuery = req.query.q ? String(req.query.q).trim() : null;
    const safeRawQuery = rawQuery ? rawQuery.replace(/"/g, "").trim() : null;
    const userQueryNormalized = safeRawQuery ? normalize(safeRawQuery) : null;

    const userUF = req.query.uf ? `AND (${req.query.uf})` : "";

    const isUserTermValid =
      !!userQueryNormalized &&
      NORMALIZED_VALID_TERMS.some((kw) => kw.includes(userQueryNormalized));

    let finalQuery;
    if (isUserTermValid) {
      const qTerm = safeRawQuery;
      finalQuery = `(intitle:"${qTerm}" OR intext:"${qTerm}") AND (${BASE_QUERY}) ${userUF} Brasil`;
    } else {
      finalQuery = `${BASE_QUERY} ${userUF} Brasil`;
    }

    if (
      cache[finalQuery] &&
      Date.now() - cache[finalQuery].timestamp < CACHE_TIME
    ) {
      if (debug) console.log("[cache hit] query:", finalQuery);
      return res.json(cache[finalQuery].data);
    }

    const url = `https://serpapi.com/search.json?engine=google_news&q=${encodeURIComponent(
      finalQuery
    )}&hl=pt&gl=br&api_key=${SERPAPI_KEY}`;

    if (debug) console.log("Buscando not√≠cias SerpApi:", url);

    const response = await fetch(url);
    const data = await response.json();

    let articles = (data.news_results || []).map((item) => ({
      title: item.title || "",
      snippet: item.snippet || "",
      link: item.link,
      thumbnail: item.thumbnail || null,
      source: item.source_name || "SerpApi",
      publishedAt: item.date || null,
      // para debug: mantemos raw item
      _raw: item,
    }));

    articles = articles.filter((item) => {
      const txt = normalize(`${item.title} ${item.snippet}`);

      const temTermoValido = NORMALIZED_VALID_TERMS.some((kw) =>
        txt.includes(kw)
      );

      const temTermoUsuario = isUserTermValid
        ? txt.includes(userQueryNormalized)
        : true;

      return temTermoValido && temTermoUsuario;
    });

    if (debug) {
      console.log(">>> Debug: primeiros 10 artigos ap√≥s filtro:");
      articles.slice(0, 10).forEach((a, i) => {
        const txt = normalize(`${a.title} ${a.snippet}`);
        const hasUser = userQueryNormalized
          ? new RegExp("\\b" + escapeRegex(userQueryNormalized) + "\\b").test(
              txt
            )
          : false;
        const matchedValid = NORMALIZED_VALID_TERMS.filter((kw) =>
          txt.includes(kw)
        );
        console.log(
          `#${i + 1} ‚Äî title: ${a.title}\n  source: ${
            a.source
          }\n  hasUserTerm:${hasUser} matchedValid:[${matchedValid.join(
            ", "
          )}]\n  link: ${a.link}\n`
        );
      });
      console.log(">>> total ap√≥s filtro:", articles.length);
      console.log(">>> total raw results:", (data.news_results || []).length);
    }

    const resultToCache = articles.map(({ _raw, ...keep }) => keep);
    cache[finalQuery] = { data: resultToCache, timestamp: Date.now() };

    res.json(resultToCache);
  } catch (err) {
    console.error("Erro ao buscar not√≠cias:", err);
    res.status(500).json({ error: "Erro ao buscar not√≠cias" });
  }
});

export default router;
